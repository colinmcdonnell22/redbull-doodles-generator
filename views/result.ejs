<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Doodle Generator</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #f5f5f5, #e0e0e0);
            color: #333;
            margin: 0;
            padding: 0.5rem;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            overflow-y: auto;
        }

        .container {
            background: white;
            border: 2px solid #e30613; /* Red Bull red color */
            padding: 0.8rem;
            border-radius: 10px;
            max-width: 350px;
            width: 90%;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            text-align: center;
            position: relative;
        }

        h1 {
            font-size: 1.3rem;
            margin: 0 0 0.6rem 0;
            color: #e30613;
            font-weight: bold;
        }

        img {
            display: block;
            width: 100%;
            height: auto;
            margin-bottom: 0.6rem;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        label {
            font-weight: bold;
            font-size: 0.9rem;
            margin-bottom: 0.3rem;
            display: block;
            color: #333;
            text-align: left;
        }

        input[type="text"] {
            font-family: 'Arial', sans-serif;
            font-size: 0.9rem;
            padding: 0.6rem;
            border: 1px solid #ccc;
            border-radius: 6px;
            width: calc(100% - 1.2rem);
            background: #f9f9f9;
            color: #333;
            box-sizing: border-box;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #e30613;
            box-shadow: 0 0 0 2px rgba(227, 6, 19, 0.2);
        }

        input[type="text"]::placeholder {
            color: #999;
        }

        button {
            font-family: 'Arial', sans-serif;
            background-color: #e30613;
            color: #fff;
            font-size: 0.9rem;
            padding: 0.6rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-transform: uppercase;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.2s ease;
            margin-top: 0.6rem;
            width: 100%;
        }

        button:hover {
            background-color: #c00511;
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        }

        button:active {
            transform: translateY(1px);
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .prompt-display {
            background: #f9f9f9;
            border-radius: 6px;
            padding: 0.6rem;
            margin-bottom: 0.6rem;
            text-align: left;
            border: 1px solid #eee;
            font-size: 0.9rem;
        }

        .prompt-display p {
            margin: 0;
        }

        .button-container {
            display: flex;
            gap: 0.6rem;
            margin-top: 0.6rem;
        }

        .button-secondary {
            background-color: #333;
        }

        .button-secondary:hover {
            background-color: #222;
        }

        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            border-radius: 10px;
            z-index: 10;
            display: none; /* Initially hidden */
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(227, 6, 19, 0.2);
            border-radius: 50%;
            border-top-color: #e30613;
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 15px;
        }

        .loading-text {
            color: #e30613;
            font-weight: bold;
            font-size: 1rem;
            text-align: center;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Credit line style */
        .credit-line {
            font-size: 0.7rem;
            color: #999;
            text-align: center;
            margin-top: 1rem;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Doodle Generator</h1>
        <form id="generate-form" action="/generate" method="POST" enctype="multipart/form-data">
            <!-- Generated Image -->
            <img src="<%= imageUrl %>" alt="Generated Image" id="generated-image">
            
            <!-- Prompt Display -->
            <div class="prompt-display">
                <p><strong>Your prompt:</strong> <%= prompt %></p>
                <% if (typeof isImageToImage !== 'undefined' && isImageToImage) { %>
                    <p><small><em>Generated using your uploaded image</em></small></p>
                <% } else { %>
                    <p><small><em>Generated from text prompt only</em></small></p>
                <% } %>
            </div>
            
            <!-- Prompt Input -->
            <label for="prompt">What do you want to create?</label>
            <input type="text" id="prompt" name="prompt" placeholder="e.g., A Red Bull car racing in the mountains..." value="<%= prompt %>" required>

            <!-- Hidden input fields for defaults -->
            <input type="hidden" name="guidance_scale" value="7.0">
            <input type="hidden" name="num_inference_steps" value="30">

            <!-- Button Container -->
            <div class="button-container">
                <button type="submit" id="generate-button">Create New Doodle</button>
                <button type="button" id="download-button" class="button-secondary">Download</button>
            </div>
            
            <!-- Credit Line -->
            <div class="credit-line">Made with ü™Ω‚ù§Ô∏è by Colin McDonnell</div>
        </form>

        <!-- Loading Overlay -->
        <div class="loading-overlay" id="loading-overlay">
            <div class="spinner"></div>
            <div class="loading-text">Creating your Red Bull Doodle...</div>
        </div>
    </div>

    <script>
        // Show loading spinner when form is submitted
        const form = document.getElementById('generate-form');
        const loadingOverlay = document.getElementById('loading-overlay');
        const generateButton = document.getElementById('generate-button');
        const downloadButton = document.getElementById('download-button');
        const generatedImage = document.getElementById('generated-image');

        form.addEventListener('submit', function(e) {
            // Check form validity first
            if (!form.checkValidity()) {
                return; // Let the browser handle invalid form
            }
            
            // Show the loading overlay
            loadingOverlay.style.display = 'flex';
            
            // Disable the buttons to prevent multiple submissions
            generateButton.disabled = true;
            downloadButton.disabled = true;
            
            // The form will submit normally, taking the user to the results page
        });

        // Set up download functionality
        downloadButton.addEventListener('click', function() {
            const imageUrl = generatedImage.src;
            
            // Create a virtual link and trigger download
            const downloadLink = document.createElement('a');
            
            // If the image is a data URL (base64), we can download it directly
            if (imageUrl.startsWith('data:')) {
                downloadLink.href = imageUrl;
                downloadLink.download = `red-bull-doodle-${Date.now()}.webp`;
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
            } 
            // If it's a remote URL, we need to fetch it first
            else {
                // Show feedback
                downloadButton.textContent = "Downloading...";
                
                fetch(imageUrl)
                    .then(response => response.blob())
                    .then(blob => {
                        const blobUrl = window.URL.createObjectURL(blob);
                        downloadLink.href = blobUrl;
                        downloadLink.download = `red-bull-doodle-${Date.now()}.webp`;
                        document.body.appendChild(downloadLink);
                        downloadLink.click();
                        window.URL.revokeObjectURL(blobUrl);
                        document.body.removeChild(downloadLink);
                        downloadButton.textContent = "Download";
                    })
                    .catch(error => {
                        console.error('Download failed:', error);
                        downloadButton.textContent = "Download Failed";
                        setTimeout(() => {
                            downloadButton.textContent = "Download";
                        }, 2000);
                    });
            }
        });
    </script>
    <script>
        window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };
    </script>
    <script defer src="/_vercel/insights/script.js"></script>
</body>
</html>
